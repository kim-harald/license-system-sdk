/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/tenants/{tenantId}/license/Bucket/{bucketId}": {
    get: operations["GetBucket"];
  };
  "/api/common/license/{tenantId}/bucket/{bucketId}": {
    get: operations["GetBucketCommon"];
  };
  "/api/tenants/{tenantId}/license/Bucket/type/{bucketType}": {
    get: operations["GetBucketId"];
  };
  "/api/common/license/{tenantId}/bucket/type/{bucketType}": {
    get: operations["GetBucketIdCommon"];
  };
  "/api/tenants/{tenantId}/license/Bucket/create": {
    post: operations["CreateBucket"];
  };
  "/api/common/license/{tenantId}/bucket/create": {
    post: operations["CreateBucketCommon"];
  };
  "/api/tenants/{tenantId}/license/Bucket/createtenantbuckets": {
    post: operations["CreateTenant"];
  };
  "/api/common/license/{tenantId}/bucket/createtenantbuckets": {
    post: operations["CreateTenantCommon"];
  };
  "/discovery": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain; version=1.0": components["schemas"]["Api"];
            "application/json; version=1.0": components["schemas"]["Api"];
            "text/json; version=1.0": components["schemas"]["Api"];
          };
        };
      };
    };
  };
  "/api/common/license/info": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/license/Job/remove/user/{tenantId}/{userId}": {
    get: {
      parameters: {
        path: {
          /** The tenant id of the user */
          tenantId: number;
          /** The user id */
          userId: number;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain; version=1.0": boolean;
            "application/json; version=1.0": boolean;
            "text/json; version=1.0": boolean;
          };
        };
        /** Unauthorized */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** Forbidden */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/tenants/{tenantId}/License/haslicense/{userId}": {
    post: operations["CheckTenantUserLicense"];
  };
  "/api/common/license/{tenantId}/haslicense/{userId}": {
    post: operations["CheckTenantUserLicenseCommon"];
  };
  "/api/tenants/{tenantId}/License/userlicenses/{userId}": {
    post: operations["GetTenantUserLicenses"];
  };
  "/api/common/license/{tenantId}/userlicenses/{userId}": {
    post: operations["GetTenantUserLicensesCommon"];
  };
  "/api/tenants/{tenantId}/License/tenantlicenses": {
    get: operations["GetTenantLicenses"];
    post: operations["GetTenantLicensesWithLicenseQuerySpec"];
  };
  "/api/common/license/{tenantId}/tenantlicenses": {
    get: operations["GetTenantLicensesCommon"];
    post: operations["GetTenantLicensesWithLicenseQuerySpecCommon"];
  };
  "/api/tenants/{tenantId}/License/users": {
    get: operations["GetUsersWithLicenses"];
    post: operations["GetUsers"];
  };
  "/api/common/license/{tenantId}/users": {
    get: operations["GetUsersWithLicensesCommon"];
    post: operations["GetUsersCommon"];
  };
  "/api/tenants/{tenantId}/License/deleteforuser/{userId}": {
    post: {
      parameters: {
        path: {
          /** The tenant Id */
          tenantId: number;
          /** The user Id */
          userId: number;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns bool indicating if the delete was ok */
        200: {
          content: {
            "text/plain; version=1.0": boolean;
            "application/json; version=1.0": boolean;
            "text/json; version=1.0": boolean;
          };
        };
        /** Tenant id, user id or the licenseQuerySpec is wrong. Details should be in the response body */
        400: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not authenticated. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
      /** The LicenseQuerySpec that specifies which app to delete the license for */
      requestBody: {
        content: {
          "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
          "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
          "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
          "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        };
      };
    };
  };
  "/api/tenants/{tenantId}/License/deletelicense/{licenseId}": {
    delete: {
      parameters: {
        path: {
          /** The tenant Id */
          tenantId: number;
          /** The license Id */
          licenseId: number;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns bool indicating if the delete was ok */
        200: {
          content: {
            "text/plain; version=1.0": boolean;
            "application/json; version=1.0": boolean;
            "text/json; version=1.0": boolean;
          };
        };
        /** Tenant id or license id is wrong. Details should be in the response body */
        400: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not authenticated. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/tenants/{tenantId}/License/create": {
    post: operations["CreateLicense"];
  };
  "/api/common/license/{tenantId}/create": {
    post: operations["CreateLicenseCommon"];
  };
  "/api/tenants/{tenantId}/License/changelicensetype/{licenseId}/{licensetype}": {
    get: operations["ChangeLicenseType"];
  };
  "/api/common/license/{tenantId}/changelicensetype/{licenseId}/{licensetype}": {
    get: operations["ChangeLicenseTypeCommon"];
  };
  "/api/tenants/{tenantId}/License/changelicensetype/{licensetype}": {
    post: operations["ChangeLicenseTypeWithLicenseQuerySpec"];
  };
  "/api/common/license/{tenantId}/changelicensetype/{licensetype}": {
    post: operations["ChangeLicenseTypeWithLicenseQuerySpecCommon"];
  };
  "/api/tenants/{tenantId}/License/create/{bucketType}": {
    post: {
      parameters: {
        path: {
          /** The tenant Id */
          tenantId: number;
          /** In which bucket should the new license be placed. Default is auto. */
          bucketType: components["schemas"]["BucketType"];
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns bool indicating if the create was OK */
        200: {
          content: {
            "text/plain; version=1.0": boolean;
            "application/json; version=1.0": boolean;
            "text/json; version=1.0": boolean;
          };
        };
        /** Tenant id or something in the license to be created is wrong. Details should be in the response body */
        400: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not authenticated. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
      /** A License object that should be created */
      requestBody: {
        content: {
          "application/json-patch+json; version=1.0": components["schemas"]["ApiLicense"];
          "application/json; version=1.0": components["schemas"]["ApiLicense"];
          "text/json; version=1.0": components["schemas"]["ApiLicense"];
          "application/*+json; version=1.0": components["schemas"]["ApiLicense"];
        };
      };
    };
  };
  "/api/common/license/{tenantId}/createshadow/{toTenantId}": {
    post: {
      parameters: {
        path: {
          /** The tenant that owns the licenses */
          tenantId: number;
          /** The tenant that is going to own the shadow licenses */
          toTenantId: number;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns bool indicating if the create was OK */
        200: {
          content: {
            "text/plain; version=1.0": boolean;
            "application/json; version=1.0": boolean;
            "text/json; version=1.0": boolean;
          };
        };
        /** Tenant id or something in the license to be created is wrong. Details should be in the response body */
        400: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not authenticated. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
      /** An array of license ids to create shadow licenses for */
      requestBody: {
        content: {
          "application/json-patch+json; version=1.0": number[];
          "application/json; version=1.0": number[];
          "text/json; version=1.0": number[];
          "application/*+json; version=1.0": number[];
        };
      };
    };
  };
  "/api/common/license/{tenantId}/convertToNormal/{licenseId}": {
    get: {
      parameters: {
        path: {
          /** The tenant that owns the licenses */
          tenantId: number;
          /** The id of the shadow license to convert */
          licenseId: number;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns bool indicating if the create was OK */
        200: {
          content: {
            "text/plain; version=1.0": components["schemas"]["License"];
            "application/json; version=1.0": components["schemas"]["License"];
            "text/json; version=1.0": components["schemas"]["License"];
          };
        };
        /** Tenant id or something in the license to be created is wrong. Details should be in the response body */
        400: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not authenticated. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/common/license/metric/fortenant/{tenantId}": {
    get: {
      parameters: {
        path: {
          /** The tenant Id */
          tenantId: number;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns a dictionary of the license counts */
        200: {
          content: {
            "text/plain; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "application/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "text/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
          };
        };
        /** User is not authenticated or the tenant don't exist. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/tenants/{tenantId}/license/Metric": {
    get: {
      parameters: {
        path: {
          /** The tenant Id */
          tenantId: number;
        };
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns a dictionary of the license counts */
        200: {
          content: {
            "text/plain; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "application/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "text/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
          };
        };
        /** User is not authenticated or the tenant don't exist. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/common/license/metric": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns a dictionary of the license counts */
        200: {
          content: {
            "text/plain; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "application/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "text/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
          };
        };
        /** User is not authenticated or the tenant don't exist. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/api/common/license/metric/filter": {
    post: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns a dictionary of the license counts */
        200: {
          content: {
            "text/plain; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "application/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
            "text/json; version=1.0": {
              [key: string]: components["schemas"]["BucketCount"];
            };
          };
        };
        /** Usually when there is something in the filter that isn't correct */
        400: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not authenticated or the tenant don't exist. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
      /** The License Query Spec */
      requestBody: {
        content: {
          "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
          "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
          "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
          "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        };
      };
    };
  };
  "/api/tenants/{tenantId}/license/Metric/filter": {
    post: operations["GetFilteredLicenseCount"];
  };
  "/api/common/license/metric/{tenantId}/filter": {
    post: operations["GetFilteredLicenseCountCommon"];
  };
  "/api/common/license/metric/total": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Returns a bucket count without applications and buckets */
        200: {
          content: {
            "text/plain; version=1.0": components["schemas"]["BucketCount"];
            "application/json; version=1.0": components["schemas"]["BucketCount"];
            "text/json; version=1.0": components["schemas"]["BucketCount"];
          };
        };
        /** User is not authenticated or the tenant don't exist. */
        401: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
        /** User is not allowed to access tenant. */
        403: {
          content: {
            "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
            "application/json; version=1.0": components["schemas"]["ProblemDetails"];
            "text/json; version=1.0": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
  };
  "/swagger/docs": {
    get: {
      parameters: {
        query: {
          "api-version"?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            "text/plain; version=1.0": string[];
            "application/json; version=1.0": string[];
            "text/json; version=1.0": string[];
          };
        };
      };
    };
  };
  "/api/tenants/{tenantId}/license/Transaction/movefromnotinuse/{toUserId}": {
    post: operations["MoveAnyLicenseFromTenantFreeBucketToTenantUser"];
  };
  "/api/common/license/{tenantId}/transaction/movefromnotinuse/{toUserId}": {
    post: operations["MoveAnyLicenseFromTenantFreeBucketToTenantUserCommon"];
  };
  "/api/tenants/{tenantId}/license/Transaction/movefromnotinuse/{fromBucketType}/{toUserId}": {
    post: operations["MoveAnyLicenseFromTenantFreeBucketTypeToTenantUser"];
  };
  "/api/common/license/{tenantId}/transaction/movefromnotinuse/{fromBucketType}/{toUserId}": {
    post: operations["MoveAnyLicenseFromTenantFreeBucketTypeToTenantUserCommon"];
  };
  "/api/tenants/{tenantId}/license/Transaction/move/{fromBucketType}/to/{toBucketType}": {
    post: operations["MoveAnyLicenseFromFromBucketTypeToBucketType"];
  };
  "/api/common/license/{tenantId}/transaction/move/{fromBucketType}/to/{toBucketType}": {
    post: operations["MoveAnyLicenseFromFromBucketTypeToBucketTypeCommon"];
  };
  "/api/tenants/{tenantId}/license/Transaction/{fromUserId}/movetoUser/{toUserId}": {
    post: operations["MoveAnyLicenseIdFromUserToUser"];
  };
  "/api/common/license/{tenantId}/transaction/{fromUserId}/movetoUser/{toUserId}": {
    post: operations["MoveAnyLicenseIdFromUserToUserCommon"];
  };
  "/api/tenants/{tenantId}/license/Transaction/{fromBucketId}/movetoBucket/{toBucketId}": {
    post: operations["MoveAnyLicenseIdFromBucketToBucket"];
  };
  "/api/common/license/{tenantId}/transaction/{fromBucketId}/movetoBucket/{toBucketId}": {
    post: operations["MoveAnyLicenseIdFromBucketToBucketCommon"];
  };
  "/api/tenants/{tenantId}/license/Transaction/movetogarbage/{userId}": {
    post: operations["MoveLicenseFromUserToGarbage"];
  };
  "/api/common/license/{tenantId}/transaction/movetogarbage/{userId}": {
    post: operations["MoveLicenseFromUserToGarbageCommon"];
  };
  "/api/tenants/{tenantId}/license/history/bucket/{bucketId}": {
    get: operations["GetBucketTransactionHistory"];
  };
  "/api/common/license/{tenantId}/history/bucket/{bucketId}": {
    get: operations["GetBucketTransactionHistoryCommon"];
  };
  "/api/tenants/{tenantId}/license/history/userbucket/{userId}": {
    get: operations["GetUserBucketTransactionHistory"];
  };
  "/api/common/license/{tenantId}/history/userbucket/{userId}": {
    get: operations["GetUserBucketTransactionHistoryCommon"];
  };
  "/api/tenants/{tenantId}/license/history/license/{licenseId}": {
    get: operations["GetLicenseTransactionHistory"];
  };
  "/api/common/license/{tenantId}/history/license/{licenseId}": {
    get: operations["GetLicenseTransactionHistoryCommon"];
  };
}

export interface components {
  schemas: {
    /**
     * Format: int32
     * @enum {integer}
     */
    LicenseType: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
     * Format: int32
     * @enum {integer}
     */
    BucketType: 1 | 2 | 3 | 4 | 99;
    /**
     * Format: int32
     * @enum {integer}
     */
    BucketState: 1 | 2;
    Bucket: {
      /** Format: int32 */
      id?: number | null;
      bucketType?: components["schemas"]["BucketType"];
      bucketState?: components["schemas"]["BucketState"];
      /** Format: int32 */
      tenantId?: number;
      /** Format: int32 */
      userId?: number | null;
      /** Format: date-time */
      lastModified?: string;
      /** Format: int32 */
      lastModifiedByActorId?: number;
      /** Format: date-time */
      validFrom?: string | null;
      /** Format: date-time */
      validTo?: string | null;
      /** Format: int32 */
      licenseCountLimit?: number | null;
    };
    App: {
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      parentId?: number | null;
      displayName?: string | null;
      clientId?: string | null;
      wareId?: string | null;
      generateEscrowLicense?: boolean | null;
      escrowExpiration?: string | null;
      /** Format: date-time */
      validFrom?: string | null;
      /** Format: date-time */
      validTo?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    LicenseState: 1 | 2 | 3 | 4 | 5;
    /** @description API Model for License with attached Applications */
    ApiLicense: {
      /** @description License Type */
      licenseType?: components["schemas"]["LicenseType"];
      /** @description Bucket this license belongs to */
      bucket?: components["schemas"]["Bucket"] | null;
      /** @description Attached Applications */
      apps?: components["schemas"]["App"][] | null;
      /** Format: int32 */
      id?: number | null;
      issuer?: string | null;
      /** Format: date-time */
      issued?: string;
      settingJson?: string | null;
      licenseState?: components["schemas"]["LicenseState"];
      stateJson?: string | null;
      /** Format: date-time */
      expirationDate?: string | null;
      /** Format: date-time */
      consolidationDate?: string | null;
      /** Format: date-time */
      suspensionDate?: string | null;
      /** Format: date-time */
      lastModified?: string;
      /** Format: int32 */
      lastModifiedByActorId?: number;
      /** Format: date-time */
      validFrom?: string | null;
      /** Format: date-time */
      validTo?: string | null;
      shadow?: boolean;
      /** Format: int32 */
      shadowOfId?: number | null;
    };
    /** @description API Model for Bucket. Includes attached licenses */
    ApiBucket: {
      /** @description Attached licenses */
      licenses?: components["schemas"]["ApiLicense"][] | null;
      /** Format: int32 */
      id?: number | null;
      bucketType?: components["schemas"]["BucketType"];
      bucketState?: components["schemas"]["BucketState"];
      /** Format: int32 */
      tenantId?: number;
      /** Format: int32 */
      userId?: number | null;
      /** Format: date-time */
      lastModified?: string;
      /** Format: int32 */
      lastModifiedByActorId?: number;
      /** Format: date-time */
      validFrom?: string | null;
      /** Format: date-time */
      validTo?: string | null;
      /** Format: int32 */
      licenseCountLimit?: number | null;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
    } & { [key: string]: { [key: string]: unknown } };
    Resource: {
      route?: string | null;
      method?: string | null;
    };
    Api: {
      resources?: components["schemas"]["Resource"][] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    AuthorizationRole: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    /**
     * Format: int32
     * @enum {integer}
     */
    ShadowType: 0 | 1 | 2;
    LicenseQuerySpec: {
      wareId?: string | null;
      /** Format: int32 */
      appId?: number | null;
      clientId?: string | null;
      displayName?: string | null;
      licenseType?: components["schemas"]["LicenseType"] | null;
      roles?: components["schemas"]["AuthorizationRole"][] | null;
      appIdArray?: number[] | null;
      shadowType?: components["schemas"]["ShadowType"];
    };
    License: {
      /** Format: int32 */
      id?: number | null;
      licenseType?: components["schemas"]["LicenseType"];
      issuer?: string | null;
      /** Format: date-time */
      issued?: string;
      settingJson?: string | null;
      licenseState?: components["schemas"]["LicenseState"];
      stateJson?: string | null;
      /** Format: date-time */
      expirationDate?: string | null;
      /** Format: date-time */
      consolidationDate?: string | null;
      /** Format: date-time */
      suspensionDate?: string | null;
      /** Format: date-time */
      lastModified?: string;
      /** Format: int32 */
      lastModifiedByActorId?: number;
      /** Format: date-time */
      validFrom?: string | null;
      /** Format: date-time */
      validTo?: string | null;
      shadow?: boolean;
      /** Format: int32 */
      shadowOfId?: number | null;
    };
    BucketCount: {
      /** Format: int32 */
      inUseUser?: number;
      /** Format: int32 */
      inUseTenant?: number;
      /** Format: int32 */
      notInUse?: number;
      /** Format: int32 */
      notInUseAuto?: number;
      /** Format: int32 */
      total?: number;
    };
    BucketTransactionHistory: {
      /** Format: int32 */
      transactionId?: number;
      /** Format: date-time */
      timestamp?: string;
      /** Format: int32 */
      fromBucketId?: number;
      fromBucketType?: components["schemas"]["BucketType"];
      fromBucketState?: components["schemas"]["BucketState"];
      /** Format: int32 */
      fromBucketTenantId?: number | null;
      /** Format: int32 */
      fromBucketUserId?: number | null;
      /** Format: int32 */
      licenseId?: number;
      apps?: components["schemas"]["App"][] | null;
      licenseType?: components["schemas"]["LicenseType"];
      licenseState?: components["schemas"]["LicenseState"];
      /** Format: int32 */
      toBucketId?: number;
      toBucketType?: components["schemas"]["BucketType"];
      toBucketState?: components["schemas"]["BucketState"];
      /** Format: int32 */
      toBucketTenantId?: number | null;
      /** Format: int32 */
      toBucketUserId?: number | null;
    };
    Actor: {
      /** Format: int32 */
      id?: number | null;
      /** Format: int32 */
      tenantId?: number | null;
      /** Format: int32 */
      userId?: number | null;
      client?: string | null;
      taskName?: string | null;
      sticosUserName?: string | null;
      isSticos?: boolean;
      comment?: string | null;
    };
    LicenseTransactionHistory: {
      /** Format: int32 */
      transactionId?: number;
      /** Format: date-time */
      timestamp?: string;
      actor?: components["schemas"]["Actor"];
      /** Format: int32 */
      toBucketId?: number;
      toBucketType?: components["schemas"]["BucketType"];
      toBucketState?: components["schemas"]["BucketState"];
      /** Format: int32 */
      licenseId?: number;
      apps?: components["schemas"]["App"][] | null;
      licenseType?: components["schemas"]["LicenseType"];
      licenseState?: components["schemas"]["LicenseState"];
    };
  };
}

export interface operations {
  GetBucket: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucket Id */
        bucketId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was okay */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiBucket"];
          "application/json; version=1.0": components["schemas"]["ApiBucket"];
          "text/json; version=1.0": components["schemas"]["ApiBucket"];
        };
      };
      /** Returns a error message, usually related to wrong bucket id */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** The bucket wasn't found. */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetBucketCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucket Id */
        bucketId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was okay */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiBucket"];
          "application/json; version=1.0": components["schemas"]["ApiBucket"];
          "text/json; version=1.0": components["schemas"]["ApiBucket"];
        };
      };
      /** Returns a error message, usually related to wrong bucket id */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** The bucket wasn't found. */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetBucketId: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucket type */
        bucketType: components["schemas"]["BucketType"];
      };
      query: {
        /** The user id (if needed) */
        userId?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was ok */
      200: {
        content: {
          "text/plain; version=1.0": number;
          "application/json; version=1.0": number;
          "text/json; version=1.0": number;
        };
      };
      /** Return an error message, usually wring user id when the bucket type is User */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetBucketIdCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucket type */
        bucketType: components["schemas"]["BucketType"];
      };
      query: {
        /** The user id (if needed) */
        userId?: number;
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was ok */
      200: {
        content: {
          "text/plain; version=1.0": number;
          "application/json; version=1.0": number;
          "text/json; version=1.0": number;
        };
      };
      /** Return an error message, usually wring user id when the bucket type is User */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  CreateBucket: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was okay */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The bucket you want added */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["Bucket"];
        "application/json; version=1.0": components["schemas"]["Bucket"];
        "text/json; version=1.0": components["schemas"]["Bucket"];
        "application/*+json; version=1.0": components["schemas"]["Bucket"];
      };
    };
  };
  CreateBucketCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was okay */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The bucket you want added */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["Bucket"];
        "application/json; version=1.0": components["schemas"]["Bucket"];
        "text/json; version=1.0": components["schemas"]["Bucket"];
        "application/*+json; version=1.0": components["schemas"]["Bucket"];
      };
    };
  };
  CreateTenant: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was okay */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  CreateTenantCommon: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was okay */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  CheckTenantUserLicense: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user Id */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Return value specifies if user has a license for the given app. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The LicenseQuerySpec that specifies the app we are checking the license for */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  CheckTenantUserLicenseCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user Id */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Return value specifies if user has a license for the given app. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The LicenseQuerySpec that specifies the app we are checking the license for */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetTenantUserLicenses: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user Id */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all licenses the user has. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["License"][];
          "application/json; version=1.0": components["schemas"]["License"][];
          "text/json; version=1.0": components["schemas"]["License"][];
        };
      };
      /** Tenant id, user id or the licenseQuerySpec is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The LicenseQuerySpec that specifies the app we are getting the licenses for */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetTenantUserLicensesCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user Id */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all licenses the user has. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["License"][];
          "application/json; version=1.0": components["schemas"]["License"][];
          "text/json; version=1.0": components["schemas"]["License"][];
        };
      };
      /** Tenant id, user id or the licenseQuerySpec is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The LicenseQuerySpec that specifies the app we are getting the licenses for */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetTenantLicenses: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all licenses the user has. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"][];
          "application/json; version=1.0": components["schemas"]["ApiLicense"][];
          "text/json; version=1.0": components["schemas"]["ApiLicense"][];
        };
      };
      /** Tenant id is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetTenantLicensesWithLicenseQuerySpec: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all licenses the user has. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"][];
          "application/json; version=1.0": components["schemas"]["ApiLicense"][];
          "text/json; version=1.0": components["schemas"]["ApiLicense"][];
        };
      };
      /** Tenant id, user id or the licenseQuerySpec is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** Filter the licenses on type or application */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetTenantLicensesCommon: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all licenses the user has. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"][];
          "application/json; version=1.0": components["schemas"]["ApiLicense"][];
          "text/json; version=1.0": components["schemas"]["ApiLicense"][];
        };
      };
      /** Tenant id is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetTenantLicensesWithLicenseQuerySpecCommon: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all licenses the user has. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"][];
          "application/json; version=1.0": components["schemas"]["ApiLicense"][];
          "text/json; version=1.0": components["schemas"]["ApiLicense"][];
        };
      };
      /** Tenant id, user id or the licenseQuerySpec is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** Filter the licenses on type or application */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetUsersWithLicenses: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all user ids */
      200: {
        content: {
          "text/plain; version=1.0": number[];
          "application/json; version=1.0": number[];
          "text/json; version=1.0": number[];
        };
      };
      /** Tenant id is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetUsers: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all user id that matches the filter. */
      200: {
        content: {
          "text/plain; version=1.0": number[];
          "application/json; version=1.0": number[];
          "text/json; version=1.0": number[];
        };
      };
      /** Tenant id or the licenseQuerySpec is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** Filter the licenses on type or application */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetUsersWithLicensesCommon: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all user ids */
      200: {
        content: {
          "text/plain; version=1.0": number[];
          "application/json; version=1.0": number[];
          "text/json; version=1.0": number[];
        };
      };
      /** Tenant id is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetUsersCommon: {
    parameters: {
      path: {
        /** Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns all user id that matches the filter. */
      200: {
        content: {
          "text/plain; version=1.0": number[];
          "application/json; version=1.0": number[];
          "text/json; version=1.0": number[];
        };
      };
      /** Tenant id or the licenseQuerySpec is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** Filter the licenses on type or application */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  CreateLicense: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was OK */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** Tenant id or something in the license to be created is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** A License object that should be created */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["ApiLicense"];
        "application/json; version=1.0": components["schemas"]["ApiLicense"];
        "text/json; version=1.0": components["schemas"]["ApiLicense"];
        "application/*+json; version=1.0": components["schemas"]["ApiLicense"];
      };
    };
  };
  CreateLicenseCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns bool indicating if the create was OK */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** Tenant id or something in the license to be created is wrong. Details should be in the response body */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** A License object that should be created */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["ApiLicense"];
        "application/json; version=1.0": components["schemas"]["ApiLicense"];
        "text/json; version=1.0": components["schemas"]["ApiLicense"];
        "application/*+json; version=1.0": components["schemas"]["ApiLicense"];
      };
    };
  };
  ChangeLicenseType: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
        licenseId: number;
        licenseType: components["schemas"]["LicenseType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"];
          "application/json; version=1.0": components["schemas"]["ApiLicense"];
          "text/json; version=1.0": components["schemas"]["ApiLicense"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  ChangeLicenseTypeCommon: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
        licenseId: number;
        licenseType: components["schemas"]["LicenseType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"];
          "application/json; version=1.0": components["schemas"]["ApiLicense"];
          "text/json; version=1.0": components["schemas"]["ApiLicense"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  ChangeLicenseTypeWithLicenseQuerySpec: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
        /** The License Type to change to */
        licenseType: components["schemas"]["LicenseType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"];
          "application/json; version=1.0": components["schemas"]["ApiLicense"];
          "text/json; version=1.0": components["schemas"]["ApiLicense"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** License Query Spec to find target licenses */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  ChangeLicenseTypeWithLicenseQuerySpecCommon: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
        /** The License Type to change to */
        licenseType: components["schemas"]["LicenseType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ApiLicense"];
          "application/json; version=1.0": components["schemas"]["ApiLicense"];
          "text/json; version=1.0": components["schemas"]["ApiLicense"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** License Query Spec to find target licenses */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetFilteredLicenseCount: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns a dictionary of the license counts */
      200: {
        content: {
          "text/plain; version=1.0": {
            [key: string]: components["schemas"]["BucketCount"];
          };
          "application/json; version=1.0": {
            [key: string]: components["schemas"]["BucketCount"];
          };
          "text/json; version=1.0": {
            [key: string]: components["schemas"]["BucketCount"];
          };
        };
      };
      /** Usually when there is something in the filter that isn't correct */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated or the tenant don't exist. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetFilteredLicenseCountCommon: {
    parameters: {
      path: {
        /** The Tenant Id */
        tenantId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Returns a dictionary of the license counts */
      200: {
        content: {
          "text/plain; version=1.0": {
            [key: string]: components["schemas"]["BucketCount"];
          };
          "application/json; version=1.0": {
            [key: string]: components["schemas"]["BucketCount"];
          };
          "text/json; version=1.0": {
            [key: string]: components["schemas"]["BucketCount"];
          };
        };
      };
      /** Usually when there is something in the filter that isn't correct */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated or the tenant don't exist. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseFromTenantFreeBucketToTenantUser: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user which should have the free license */
        toUserId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License successfully moved from the free bucket to a user bucket. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** If the license couldn't be moved, it will usually become a bad request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseFromTenantFreeBucketToTenantUserCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user which should have the free license */
        toUserId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License successfully moved from the free bucket to a user bucket. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** If the license couldn't be moved, it will usually become a bad request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseFromTenantFreeBucketTypeToTenantUser: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user which should have the free license */
        toUserId: number;
        /** Specify which free bucket to move from. This is usually Auto. User, Tenant and Garbage bucket is not allowed. */
        fromBucketType: components["schemas"]["BucketType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License successfully moved from the free bucket to a user bucket. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** If the license couldn't be moved, it will usually become a bad request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** Filter the licenses to be moved */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseFromTenantFreeBucketTypeToTenantUserCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user which should have the free license */
        toUserId: number;
        /** Specify which free bucket to move from. This is usually Auto. User, Tenant and Garbage bucket is not allowed. */
        fromBucketType: components["schemas"]["BucketType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License successfully moved from the free bucket to a user bucket. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** If the license couldn't be moved, it will usually become a bad request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** Filter the licenses to be moved */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseFromFromBucketTypeToBucketType: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucket type to move the matching license from. Can't be a user bucket */
        fromBucketType: components["schemas"]["BucketType"];
        /** The bucket type to move the matching license to. Can't be a user bucket */
        toBucketType: components["schemas"]["BucketType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License successfully moved from the free bucket to a user bucket. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** If the license couldn't be moved, it will usually become a bad request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseFromFromBucketTypeToBucketTypeCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucket type to move the matching license from. Can't be a user bucket */
        fromBucketType: components["schemas"]["BucketType"];
        /** The bucket type to move the matching license to. Can't be a user bucket */
        toBucketType: components["schemas"]["BucketType"];
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License successfully moved from the free bucket to a user bucket. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** If the license couldn't be moved, it will usually become a bad request */
      400: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseIdFromUserToUser: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user to move the license from */
        fromUserId: number;
        /** The user to move the license to */
        toUserId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseIdFromUserToUserCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The user to move the license from */
        fromUserId: number;
        /** The user to move the license to */
        toUserId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseIdFromBucketToBucket: {
    parameters: {
      path: {
        /** The bucket to move the license from */
        fromBucketId: number;
        /** The bucket to move the license to */
        toBucketId: number;
        tenantId: string;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveAnyLicenseIdFromBucketToBucketCommon: {
    parameters: {
      path: {
        /** The bucket to move the license from */
        fromBucketId: number;
        /** The bucket to move the license to */
        toBucketId: number;
        tenantId: string;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveLicenseFromUserToGarbage: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The User Id */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  MoveLicenseFromUserToGarbageCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The User Id */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": boolean;
          "application/json; version=1.0": boolean;
          "text/json; version=1.0": boolean;
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
    /** The License Query Spec */
    requestBody: {
      content: {
        "application/json-patch+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "text/json; version=1.0": components["schemas"]["LicenseQuerySpec"];
        "application/*+json; version=1.0": components["schemas"]["LicenseQuerySpec"];
      };
    };
  };
  GetBucketTransactionHistory: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucketId you want transaction history for */
        bucketId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "application/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "text/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Tbe bucket is not found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetBucketTransactionHistoryCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The bucketId you want transaction history for */
        bucketId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "application/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "text/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Tbe bucket is not found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetUserBucketTransactionHistory: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The userId you want transaction history for */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "application/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "text/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Tbe user bucket is not found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetUserBucketTransactionHistoryCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The userId you want transaction history for */
        userId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** Bucket transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "application/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
          "text/json; version=1.0": components["schemas"]["BucketTransactionHistory"][];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Tbe user bucket is not found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetLicenseTransactionHistory: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The licenseId you want transaction history for */
        licenseId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["LicenseTransactionHistory"][];
          "application/json; version=1.0": components["schemas"]["LicenseTransactionHistory"][];
          "text/json; version=1.0": components["schemas"]["LicenseTransactionHistory"][];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
  GetLicenseTransactionHistoryCommon: {
    parameters: {
      path: {
        /** The tenant Id */
        tenantId: number;
        /** The licenseId you want transaction history for */
        licenseId: number;
      };
      query: {
        "api-version"?: string;
      };
    };
    responses: {
      /** License transaction history were successfully retrieved. */
      200: {
        content: {
          "text/plain; version=1.0": components["schemas"]["LicenseTransactionHistory"][];
          "application/json; version=1.0": components["schemas"]["LicenseTransactionHistory"][];
          "text/json; version=1.0": components["schemas"]["LicenseTransactionHistory"][];
        };
      };
      /** User is not authenticated. */
      401: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** User is not allowed to access tenant. */
      403: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "text/plain; version=1.0": components["schemas"]["ProblemDetails"];
          "application/json; version=1.0": components["schemas"]["ProblemDetails"];
          "text/json; version=1.0": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
}

export interface external {}
